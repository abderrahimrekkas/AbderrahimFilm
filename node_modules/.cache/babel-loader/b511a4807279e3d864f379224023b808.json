{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ENAA\\\\Desktop\\\\Application de consultation de films\\\\src\\\\Pages\\\\TV.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { img_300, unavailable } from \"../Components/config\";\nimport Pagination from \"../Components/Pagination\";\nimport Genre from \"../Components/Genre\";\nimport useGenre from \"../useGenre\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TV = () => {\n  _s();\n\n  const id = useParams();\n  const [state, setState] = useState([]);\n  const [page, setPage] = useState(1);\n  const [genre, setGenre] = useState([]);\n  const [value, setValue] = useState([]);\n  const genreURL = useGenre(value);\n\n  const fetchTrending = async () => {\n    const data = await fetch(`\n    https://api.themoviedb.org/3/discover/tv?api_key=3d820eab8fd533d2fd7e1514e86292ea&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}&with_genres=${genreURL}`);\n    const dataJ = await data.json();\n    setState(dataJ.results);\n  };\n\n  useEffect(() => {\n    fetchTrending();\n  }, [page, genreURL]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row py-5 my-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 text-center mt-2 mb-4 fs-1 fw-bold text-decoration-underline\",\n          children: \"TV Series\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Genre, {\n          genre: genre,\n          setGenre: setGenre,\n          setPage: setPage,\n          type: \"tv\",\n          value: value,\n          setValue: setValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), state.map(Val => {\n          const {\n            name,\n            title,\n            poster_path,\n            first_air_date,\n            release_date,\n            media_type,\n            id\n          } = Val;\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-3 col-sm-4 py-3\",\n              id: \"card\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card bg-dark\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: poster_path ? `${img_300}/${poster_path}` : unavailable,\n                  className: \"card-img-top pt-3 pb-0 px-3\",\n                  alt: title || name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title text-center fs-5\",\n                    children: title || name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 62,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"d-flex fs-6 align-items-center justify-content-evenly movie\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: media_type === \"movie\" ? \"Movie\" : \"TV\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 66,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: first_air_date || release_date\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 67,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 65,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 21\n                }, this)]\n              }, id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 19\n              }, this)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)\n          }, void 0, false);\n        }), /*#__PURE__*/_jsxDEV(Pagination, {\n          page: page,\n          setPage: setPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(TV, \"f9UC505D8NLszq+kLVKh+d4nz3A=\", false, function () {\n  return [useParams, useGenre];\n});\n\n_c = TV;\nexport default TV;\n\nvar _c;\n\n$RefreshReg$(_c, \"TV\");","map":{"version":3,"sources":["C:/Users/ENAA/Desktop/Application de consultation de films/src/Pages/TV.js"],"names":["React","useState","useEffect","img_300","unavailable","Pagination","Genre","useGenre","Link","useParams","TV","id","state","setState","page","setPage","genre","setGenre","value","setValue","genreURL","fetchTrending","data","fetch","dataJ","json","results","map","Val","name","title","poster_path","first_air_date","release_date","media_type"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { img_300, unavailable } from \"../Components/config\";\nimport Pagination from \"../Components/Pagination\";\nimport Genre from \"../Components/Genre\";\nimport useGenre from \"../useGenre\";\nimport { Link, useParams } from \"react-router-dom\";\nconst TV = () => {\n  const id = useParams()\n  const [state, setState] = useState([]);\n  const [page, setPage] = useState(1);\n  const [genre, setGenre] = useState([]);\n  const [value, setValue] = useState([]);\n  const genreURL = useGenre(value);\n\n  const fetchTrending = async () => {\n    const data = await fetch(`\n    https://api.themoviedb.org/3/discover/tv?api_key=3d820eab8fd533d2fd7e1514e86292ea&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}&with_genres=${genreURL}`);\n    const dataJ = await data.json();\n    setState(dataJ.results);\n  };\n  useEffect(() => {\n    fetchTrending();\n  }, [page, genreURL]);\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row py-5 my-5\">\n          <div className=\"col-12 text-center mt-2 mb-4 fs-1 fw-bold text-decoration-underline\">\n            TV Series\n          </div>\n          <Genre\n            genre={genre}\n            setGenre={setGenre}\n            setPage={setPage}\n            type=\"tv\"\n            value={value}\n            setValue={setValue}\n          />\n          {state.map((Val) => {\n            const {\n              name,\n              title,\n              poster_path,\n              first_air_date,\n              release_date,\n              media_type,\n              id,\n            } = Val;\n            return (\n              <>\n                <div className=\"col-md-3 col-sm-4 py-3\" id=\"card\" key={id}>\n                  <div className=\"card bg-dark\" key={id}>\n                    <img\n                      src={\n                        poster_path ? `${img_300}/${poster_path}` : unavailable\n                      }\n                      className=\"card-img-top pt-3 pb-0 px-3\"\n                      alt={title || name}\n                    />\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title text-center fs-5\">\n                        {title || name}\n                      </h5>\n                      <div className=\"d-flex fs-6 align-items-center justify-content-evenly movie\">\n                        <div>{media_type === \"movie\" ? \"Movie\" : \"TV\"}</div>\n                        <div>{first_air_date || release_date}</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </>\n            );\n          })}\n          <Pagination page={page} setPage={setPage} />\n    \n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default TV;\n"]},"metadata":{},"sourceType":"module"}